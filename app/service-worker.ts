/// <reference lib="webworker" />

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

declare const self: ServiceWorkerGlobalScope

import { clientsClaim } from "workbox-core"
import { ExpirationPlugin } from "workbox-expiration"
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching"
import { registerRoute } from "workbox-routing"
import { StaleWhileRevalidate, CacheFirst } from "workbox-strategies"

clientsClaim()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = /\/[^/?]+\.[^/]+$/
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (fileExtensionRegexp.test(url.pathname)) {
      return false
    }

    // Return true to signal that we want to use the handler.
    return true
  },
  createHandlerBoundToURL("/index.html"),
)

// Cache images with a Cache First strategy
registerRoute(
  // Check to see if the request's destination is style for stylesheets, script for JavaScript, or image for images
  ({ request }) => request.destination === "image",
  // Use a Cache First caching strategy
  new CacheFirst({
    // Put all cached files in a cache named 'images'
    cacheName: "images",
    plugins: [
      // Ensure that only requests that result in a 200 status are cached
      {
        cacheWillUpdate: async ({ response }) => {
          return response && response.status === 200 ? response : null
        },
      },
      // Don't cache more than 50 items, and expire them after 30 days
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 Days
      }),
    ],
  }),
)

// Cache CSS and JavaScript with a Stale While Revalidate strategy
registerRoute(
  ({ request }) => request.destination === "style" || request.destination === "script",
  new StaleWhileRevalidate({
    cacheName: "static-resources",
  }),
)

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting()
  }
})

// This is a service worker file to help with caching and offline support

// Cache version - change this when you update assets
const CACHE_VERSION = "v2"
const CACHE_NAME = `yammy-yami-cache-${CACHE_VERSION}`

// Assets to cache on install
const STATIC_ASSETS = [
  "/",
  "/products",
  "/pricing",
  "/about",
  "/contact",
  "/images/baby-diapers.png",
  "/images/diaper-features.png",
  "/images/lady-pads.png",
  "/assorted-products-display.png",
]

// Install event - cache static assets
self.addEventListener("install", (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return cache.addAll(STATIC_ASSETS)
    }),
  )
})

// Activate event - clean up old caches
self.addEventListener("activate", (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames
          .filter((name) => name.startsWith("yammy-yami-cache-") && name !== CACHE_NAME)
          .map((name) => caches.delete(name)),
      )
    }),
  )
})

// Fetch event - serve from cache or network
self.addEventListener("fetch", (event) => {
  // Skip non-GET requests
  if (event.request.method !== "GET") return

  // Skip browser-sync and analytics requests
  const url = new URL(event.request.url)
  if (
    url.pathname.startsWith("/browser-sync") ||
    url.pathname.startsWith("/analytics") ||
    url.hostname.includes("google-analytics") ||
    url.hostname.includes("googletagmanager")
  ) {
    return
  }

  // Special handling for image requests
  if (event.request.url.match(/\.(jpg|jpeg|png|gif|svg|webp)$/i) || event.request.destination === "image") {
    // For images, use network first, then cache
    event.respondWith(
      fetch(event.request)
        .then((response) => {
          // Clone the response to store in cache
          const clonedResponse = response.clone()

          // Open the cache and store the new response
          caches.open(CACHE_NAME).then((cache) => {
            // Add timestamp to URL to prevent caching issues
            const timestamp = new Date().getTime()
            const urlWithTimestamp = new URL(event.request.url)
            urlWithTimestamp.searchParams.set("_sw_cache", timestamp.toString())

            // Store in cache with timestamp
            cache.put(new Request(urlWithTimestamp.toString()), clonedResponse)
          })

          return response
        })
        .catch(() => {
          // If network fails, try the cache
          return caches.match(event.request)
        }),
    )
    return
  }

  // For other requests, try cache first, then network
  event.respondWith(
    caches.match(event.request).then((cachedResponse) => {
      if (cachedResponse) {
        return cachedResponse
      }

      return fetch(event.request).then((response) => {
        // Don't cache non-successful responses
        if (!response || response.status !== 200 || response.type !== "basic") {
          return response
        }

        // Clone the response to store in cache
        const clonedResponse = response.clone()

        // Open the cache and store the new response
        caches.open(CACHE_NAME).then((cache) => {
          cache.put(event.request, clonedResponse)
        })

        return response
      })
    }),
  )
})

// Clear image cache on message
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "CLEAR_IMAGE_CACHE") {
    caches.open(CACHE_NAME).then((cache) => {
      cache.keys().then((requests) => {
        requests.forEach((request) => {
          if (request.url.match(/\.(jpg|jpeg|png|gif|svg|webp)$/i)) {
            cache.delete(request)
          }
        })
      })
    })
  }
})
