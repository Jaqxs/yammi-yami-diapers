/// <reference lib="webworker" />

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

declare const self: ServiceWorkerGlobalScope

import { clientsClaim } from "workbox-core"
import { ExpirationPlugin } from "workbox-expiration"
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching"
import { registerRoute } from "workbox-routing"
import { StaleWhileRevalidate, CacheFirst } from "workbox-strategies"

clientsClaim()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = /\/[^/?]+\.[^/]+$/
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (fileExtensionRegexp.test(url.pathname)) {
      return false
    }

    // Return true to signal that we want to use the handler.
    return true
  },
  createHandlerBoundToURL("/index.html"),
)

// Cache images with a Cache First strategy
registerRoute(
  // Check to see if the request's destination is style for stylesheets, script for JavaScript, or image for images
  ({ request }) => request.destination === "image",
  // Use a Cache First caching strategy
  new CacheFirst({
    // Put all cached files in a cache named 'images'
    cacheName: "images",
    plugins: [
      // Ensure that only requests that result in a 200 status are cached
      {
        cacheWillUpdate: async ({ response }) => {
          return response && response.status === 200 ? response : null
        },
      },
      // Don't cache more than 50 items, and expire them after 30 days
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 Days
      }),
    ],
  }),
)

// Cache CSS and JavaScript with a Stale While Revalidate strategy
registerRoute(
  ({ request }) => request.destination === "style" || request.destination === "script",
  new StaleWhileRevalidate({
    cacheName: "static-resources",
  }),
)

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting()
  }
})

// This is a service worker file to help with caching and offline support

// Cache version - change this when you update assets
const CACHE_NAME = "yammy-yami-cache-v1"
const IMAGE_CACHE_NAME = "yammy-yami-image-cache-v1"
const STATIC_CACHE_NAME = "yammy-yami-static-cache-v1"

// Add event listener for install event
self.addEventListener("install", (event) => {
  // Skip waiting to activate the new service worker immediately
  self.skipWaiting()

  console.log("Service worker installed")
})

// Add event listener for activate event
self.addEventListener("activate", (event) => {
  // Claim clients to control all open tabs
  event.waitUntil(self.clients.claim())

  // Delete old caches
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME && cacheName !== IMAGE_CACHE_NAME && cacheName !== STATIC_CACHE_NAME) {
            console.log("Deleting old cache:", cacheName)
            return caches.delete(cacheName)
          }
          return Promise.resolve()
        }),
      )
    }),
  )

  console.log("Service worker activated")
})

// Add event listener for fetch event
self.addEventListener("fetch", (event) => {
  const url = new URL(event.request.url)

  // Skip non-GET requests
  if (event.request.method !== "GET") {
    return
  }

  // Handle image requests
  if (event.request.destination === "image" || url.pathname.match(/\.(png|jpg|jpeg|gif|webp|svg|ico)$/i)) {
    // Add cache busting parameter to image URLs
    const bustedUrl = new URL(event.request.url)
    bustedUrl.searchParams.set("t", Date.now().toString())

    const bustedRequest = new Request(bustedUrl.toString(), {
      method: event.request.method,
      headers: event.request.headers,
      mode: event.request.mode,
      credentials: event.request.credentials,
      redirect: event.request.redirect,
      referrer: event.request.referrer,
      integrity: event.request.integrity,
    })

    // Network first, then cache
    event.respondWith(
      fetch(bustedRequest)
        .then((response) => {
          // Clone the response
          const responseToCache = response.clone()

          // Cache the response
          caches.open(IMAGE_CACHE_NAME).then((cache) => {
            cache.put(event.request, responseToCache)
          })

          return response
        })
        .catch(() => {
          // If network fails, try to get from cache
          return caches.match(event.request)
        }),
    )
    return
  }

  // Handle CSS and JS requests with stale-while-revalidate
  if (
    event.request.destination === "style" ||
    event.request.destination === "script" ||
    url.pathname.match(/\.(css|js)$/i)
  ) {
    event.respondWith(
      caches.open(STATIC_CACHE_NAME).then((cache) => {
        return cache.match(event.request).then((cachedResponse) => {
          const fetchPromise = fetch(event.request).then((networkResponse) => {
            cache.put(event.request, networkResponse.clone())
            return networkResponse
          })

          return cachedResponse || fetchPromise
        })
      }),
    )
    return
  }

  // Default: network first, then cache
  event.respondWith(
    fetch(event.request)
      .then((response) => {
        // Don't cache if not a success response
        if (!response || response.status !== 200 || response.type !== "basic") {
          return response
        }

        // Clone the response
        const responseToCache = response.clone()

        // Cache the response
        caches.open(CACHE_NAME).then((cache) => {
          cache.put(event.request, responseToCache)
        })

        return response
      })
      .catch(() => {
        // If network fails, try to get from cache
        return caches.match(event.request)
      }),
  )
})

// Add event listener for message event
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "CLEAR_IMAGE_CACHE") {
    event.waitUntil(
      caches.open(IMAGE_CACHE_NAME).then((cache) => {
        return cache
          .keys()
          .then((keys) => {
            return Promise.all(
              keys.map((request) => {
                return cache.delete(request)
              }),
            )
          })
          .then(() => {
            // Notify clients that cache was cleared
            self.clients.matchAll().then((clients) => {
              clients.forEach((client) => {
                client.postMessage({
                  type: "CACHE_CLEARED",
                })
              })
            })
          })
      }),
    )
  }
})

// Add event listener for push event
self.addEventListener("push", (event) => {
  const data = event.data?.json() ?? {}

  const title = data.title || "Yammy Yami Diapers"
  const options = {
    body: data.body || "New notification from Yammy Yami Diapers",
    icon: "/icons/icon-192x192.png",
    badge: "/icons/badge-72x72.png",
    data: {
      url: data.url || "/",
    },
  }

  event.waitUntil(self.registration.showNotification(title, options))
})

// Add event listener for notificationclick event
self.addEventListener("notificationclick", (event) => {
  event.notification.close()

  const url = event.notification.data?.url || "/"

  event.waitUntil(
    self.clients.matchAll({ type: "window" }).then((clientList) => {
      // Check if there is already a window/tab open with the target URL
      for (const client of clientList) {
        if (client.url === url && "focus" in client) {
          return client.focus()
        }
      }

      // If no window/tab is open with the target URL, open a new one
      if (self.clients.openWindow) {
        return self.clients.openWindow(url)
      }
    }),
  )
})
